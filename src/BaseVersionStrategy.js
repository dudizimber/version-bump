import { parseSemVer } from 'semver-parser'
import { parseOptions } from './utils'

export default class BaseVersionStrategy {
  /**
   * The strategy name used for calling the strategy in the cli and configuration file.
   * @type {string}
   */
  static strategyShortName = 'base'

  /**
   * A description of what this strategy does. Shown in the CLI strategy list.
   * @type {string}
   */
  static description = 'Example version strategy that does nothing.'

  /**
   * @param {object} options Options generated by ConfigParser
   * @param {object} [options.strategyOptions] Options specific to the strategy
   * @param {object} logger Custom logging object
   */
  constructor (options = {}, { logger } = { logger: console }) {
    this.currentVersion = null
    this.options = options
    this.strategyOptions = null
    this.logger = logger
  }

  /**
   * Returns an object used for logging
   * @return {Object}
   */
  getLogger () {
    return this.logger
  }

  /**
   * This is called before getNextVersion() in `VersionBump.js`.
   *
   * - Parses string version data into an object
   * - Parses options specific to the strategy
   * @param {string} currentVersion Version number eg '1.2.3'
   */
  async init ({ currentVersion }) {
    if (!currentVersion) {
      throw new Error('Strategy init is missing currentVersion')
    }

    this.currentVersion = parseSemVer(currentVersion)
    this.strategyOptions = await parseOptions(this.options.strategyOptions) || {}
  }

  /**
   * Describes the options specific to the strategy in the CLI.
   * It is called as part of the CLI / plugin tooling.
   * See the commander npm module for more details.
   * @param {commander} program Commander module instance
   * @returns {commander} This object MUST be returned
   */
  static initCliOptions (program) {
    return program
      .command(`${BaseVersionStrategy.strategyShortName} <options>`)
      .description(BaseVersionStrategy.description)
  }

  /**
   * Get the high-level options like fileVersion, etc.
   * @return {object}
   */
  getOptions () {
    return this.options || {}
  }

  /**
   * Get the options specific to the strategy.
   * @return {object}
   */
  getStrategyOptions () {
    return this.strategyOptions || {}
  }

  /**
   * Returns a structure that contains metadata about the parsed version.
   * @returns {Object} Partial result of semver-parser#parseSemVer
   */
  getCurrentVersion () {
    return {
      major: this.currentVersion.major,
      minor: this.currentVersion.minor,
      patch: this.currentVersion.patch,
      pre: this.currentVersion.pre,
      build: this.currentVersion.build
    }
  }

  /**
   * Returns the next release version to update the versionFile with.
   * Use getCurrentVersion() to get an object to work with.
   * @returns {Promise<object>} An updated object that was originally defined by getCurrentVersion()
   */
  async getNextVersion () {
    throw new Error('getNextVersion() is not implemented')
  }
}
